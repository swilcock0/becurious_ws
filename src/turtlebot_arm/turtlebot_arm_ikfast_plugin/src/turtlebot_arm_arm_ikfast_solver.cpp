/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-10-15 01:57:47.826938
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25;
x0=IKcos(j[0]);
x1=IKsin(j[2]);
x2=IKcos(j[1]);
x3=IKsin(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[0]);
x6=IKsin(j[3]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.106)*x3);
x11=((1.1e-7)*x0);
x12=((0.1)*x5);
x13=((1.0)*x7);
x14=((0.1)*x3);
x15=((1.0)*x3);
x16=((1.0)*x0);
x17=((0.1)*x0);
x18=((1.1e-7)*x5);
x19=((1.0)*x6);
x20=(x2*x4);
x21=(x4*x5);
x22=(x1*x2);
x23=(x1*x3);
x24=(x0*x4);
x25=(x3*x4);
IkReal x26=((1.0)*x11);
eetrans[0]=((-3.0e-8)+((x0*x10))+((x7*((((x14*x24))+((x17*x22))))))+(((-1.0)*x20*x26))+((x11*x23))+(((-1.0)*x2*x26))+((x10*x24))+((x6*(((((-1.0)*x0*x1*x14))+((x17*x20))))))+(((0.106)*x0*x22)));
IkReal x27=((1.0)*x18);
eetrans[1]=(((x18*x23))+(((0.106)*x22*x5))+(((-1.0)*x20*x27))+((x6*(((((-1.0)*x12*x23))+((x12*x20))))))+((x7*((((x12*x25))+((x12*x22))))))+(((-1.0)*x2*x27))+((x10*x5))+((x10*x21)));
IkReal x28=((1.0)*x1);
eetrans[2]=((0.0605)+((x6*(((((-0.1)*x22))+(((-1.0)*x14*x4))))))+(((0.106)*x2))+(((0.106)*x20))+((x7*(((((-1.0)*x14*x28))+(((0.1)*x20))))))+(((-1.0)*x10*x28))+(((1.1e-7)*x3))+(((1.1e-7)*x25))+(((1.1e-7)*x22)));
eerot[0]=(((x5*x9))+((x8*((((x6*((((x0*x22))+((x24*x3))))))+((x7*((((x0*x23))+(((-1.0)*x16*x20)))))))))));
IkReal x29=((1.0)*x15);
eerot[1]=((((-1.0)*x16*x9))+(((-1.0)*x8*((((x19*(((((-1.0)*x21*x29))+(((-1.0)*x22*x5))))))+((x13*(((((-1.0)*x1*x29*x5))+((x20*x5)))))))))));
eerot[2]=((-1.0)*x8*((((x19*(((((-1.0)*x20))+x23))))+((x13*(((((-1.0)*x22))+(((-1.0)*x15*x4)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r01;
new_px=py;
new_r01=((-1.0)*r00);
new_py=((-3.0e-8)+(((-1.0)*px)));
new_r02=r02;
new_pz=((-0.0605)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x31 = IKatan2WithCheck(IkReal(((-1.0)*px)),IkReal(((-1.0)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x31.valid){
continue;
}
IkReal x30=x31.value;
j0array[0]=((-1.0)*x30);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x30)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
op[0]=((((4.4e-7)*cj0*py*(px*px)*(r01*r01)))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r01*r01)))+(((-4.4e-9)*px*sj0*(r02*r02)))+(((-8.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r01*r01)))+(((-4.4e-7)*cj0*py*(px*px)*(r02*r02)))+(((-8.8e-7)*pz*r00*r02*sj0*(py*py)))+(((-4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((0.00424)*pz*(r00*r00)*(sj0*sj0)))+(((0.0199999999999516)*(px*px)*(r02*r02)))+(((-8.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((1.32e-6)*py*r00*r01*sj0*(px*px)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.0199999999999516)*(py*py)*(r02*r02)))+(((1.696)*cj0*px*py*pz*sj0*(r02*r02)))+(((-4.0)*(px*px)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((0.848)*px*py*pz*r00*r01*(sj0*sj0)))+(((0.848)*px*py*pz*r00*r01*(cj0*cj0)))+(((-0.024944)*(cj0*cj0)*(px*px)*(r01*r01)))+(((-0.424)*r01*r02*(cj0*cj0)*(py*py*py)))+(((-0.00848)*cj0*pz*r00*r01*sj0))+(((-4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-4.4e-9)*cj0*px*r00*r01))+(((0.00424)*cj0*py*r00*r02*sj0))+(((2.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((0.00424)*pz*(cj0*cj0)*(r01*r01)))+(((-1.0)*(px*px*px*px)*(r00*r00)*(sj0*sj0)))+(((-8.8e-7)*cj0*py*(px*px)*(r00*r00)))+(((-0.00424)*px*r00*r02))+(((-0.024944)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-0.00424)*px*r00*r02*(sj0*sj0)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r01*r01)))+(((-4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((4.4e-7)*px*sj0*(pz*pz)*(r02*r02)))+(((-0.00424)*py*r01*r02*(cj0*cj0)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((-0.848)*pz*(px*px)*(r02*r02)*(sj0*sj0)))+(((-0.00424)*py*r01*r02))+(((-0.424)*r00*r02*(px*px*px)*(sj0*sj0)))+(((-0.848)*cj0*px*py*pz*sj0*(r01*r01)))+(((0.848)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((0.424)*py*r01*r02*(px*px)))+(((-0.424)*(pz*pz*pz)*(r02*r02)))+(((12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((-8.8e-9)*cj0*pz*r01*r02))+(((9.328e-10)*r00*r02*sj0))+(((-0.024944)*(cj0*cj0)*(pz*pz)*(r01*r01)))+(((0.049888)*px*py*r00*r01*(cj0*cj0)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((0.424)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((-0.024944)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((2.0)*(px*px)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((-9.328e-8)*cj0*px*py*r00*r02))+(((0.049888)*px*py*r00*r01*(sj0*sj0)))+(((1.272)*py*r01*r02*(cj0*cj0)*(pz*pz)))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-0.424)*(pz*pz*pz)*(r00*r00)*(sj0*sj0)))+(((0.024944)*(px*px)*(r00*r00)*(sj0*sj0)))+(((1.272)*cj0*py*r00*r02*sj0*(px*px)))+(((-0.848)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-0.00069888)*cj0*r00*r01*sj0))+(((-1.32e-6)*cj0*px*r00*r01*(py*py)))+(((-4.4e-7)*cj0*py*(pz*pz)*(r02*r02)))+(((0.00424)*cj0*px*r01*r02*sj0))+(((-0.848)*pz*(cj0*cj0)*(py*py)*(r02*r02)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((-0.424)*pz*(py*py)*(r00*r00)*(sj0*sj0)))+(((-4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-1.272)*cj0*py*r00*r02*sj0*(pz*pz)))+(((0.00034944)*(cj0*cj0)*(r01*r01)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((-0.424)*cj0*r01*r02*sj0*(px*px*px)))+(((4.4e-7)*sj0*(px*px*px)*(r02*r02)))+(((4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((9.328e-8)*py*pz*r00*r01*sj0))+(((-4.4e-7)*px*sj0*(py*py)*(r00*r00)))+(((-4.4e-7)*cj0*py*(pz*pz)*(r01*r01)))+(((0.424)*px*r00*r02*(py*py)))+(((-4.4e-7)*cj0*px*r00*r01*(pz*pz)))+(((4.4e-7)*px*sj0*(py*py)*(r02*r02)))+(((-9.328e-8)*r00*r02*sj0*(py*py)))+(((9.328e-8)*px*pz*sj0*(r00*r00)))+(((4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((0.049888)*cj0*r00*r01*sj0*(pz*pz)))+(((-4.4e-9)*cj0*py*(r01*r01)))+(((-0.424)*pz*(cj0*cj0)*(px*px)*(r01*r01)))+(((-0.049888)*cj0*py*pz*r00*r02*sj0))+(((4.4e-7)*cj0*r00*r01*(px*px*px)))+(((-1.272)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.848)*pz*(px*px)*(r00*r00)))+(((1.272)*px*r00*r02*(pz*pz)*(sj0*sj0)))+(((0.424)*r00*r02*(px*px*px)))+(((-0.049888)*cj0*px*pz*r01*r02*sj0))+(((-0.049888)*cj0*px*py*sj0*(r01*r01)))+(((-4.0)*pz*r01*r02*(cj0*cj0)*(py*py*py)))+(((-4.4e-7)*r00*r01*sj0*(py*py*py)))+(((-4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-4.0)*pz*r00*r02*(px*px*px)*(sj0*sj0)))+(((-1.696)*px*py*pz*r00*r01))+(((0.024944)*(cj0*cj0)*(py*py)*(r01*r01)))+(((-2.0)*(py*py)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((-0.848)*pz*(py*py)*(r01*r01)))+(((-0.848)*cj0*px*py*pz*sj0*(r00*r00)))+(((-9.328e-8)*cj0*py*pz*(r01*r01)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((4.4e-7)*sj0*(px*px*px)*(r00*r00)))+(((-9.328e-10)*cj0*r01*r02))+(((0.424)*pz*(px*px)*(r02*r02)))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((4.4e-9)*cj0*py*(r02*r02)))+(((-2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r01*r01)))+(((4.0)*px*r00*r02*(pz*pz*pz)*(sj0*sj0)))+(((0.00034944)*(r00*r00)*(sj0*sj0)))+(((-0.424)*(cj0*cj0)*(pz*pz*pz)*(r01*r01)))+(((-2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((0.049888)*px*pz*r00*r02*(sj0*sj0)))+(((-1.0)*(pz*pz*pz*pz)*(r00*r00)*(sj0*sj0)))+(((-1.272)*px*r00*r02*(pz*pz)))+(((4.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((9.328e-8)*px*pz*sj0*(r02*r02)))+(((-4.4e-7)*cj0*(py*py*py)*(r02*r02)))+(((4.4e-9)*py*r00*r01*sj0))+(((-8.8e-7)*cj0*px*py*pz*r00*r02))+(((-0.424)*cj0*r00*r02*sj0*(py*py*py)))+(((0.424)*pz*(cj0*cj0)*(py*py)*(r01*r01)))+(((4.0)*py*r01*r02*(cj0*cj0)*(pz*pz*pz)))+(((9.328e-8)*px*py*r01*r02*sj0))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((9.328e-8)*cj0*r01*r02*(px*px)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((0.424)*pz*(px*px)*(r00*r00)*(sj0*sj0)))+(((12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-0.00424)*pz*(r02*r02)))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((-9.328e-8)*cj0*px*pz*r00*r01))+(((4.4e-7)*px*sj0*(pz*pz)*(r00*r00)))+(((-9.9999999999516e-5)*(r02*r02)))+(((-0.0449440000000484)*(py*py)*(r01*r01)))+(((0.424)*r01*r02*(py*py*py)))+(((8.8e-7)*cj0*pz*r01*r02*(px*px)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-0.129888)*px*pz*r00*r02))+(((-1.272)*py*r01*r02*(pz*pz)))+(((8.8e-7)*px*sj0*(py*py)*(r01*r01)))+(((4.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((1.272)*cj0*px*r01*r02*sj0*(py*py)))+(((0.424)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-0.049888)*cj0*px*py*sj0*(r00*r00)))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-0.064944)*(pz*pz)*(r02*r02)))+(((0.424)*pz*(py*py)*(r02*r02)))+(((0.049888)*py*pz*r01*r02*(cj0*cj0)))+(((-4.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((4.4e-7)*py*r00*r01*sj0*(pz*pz)))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r01*r01)))+(((8.8e-9)*pz*r00*r02*sj0))+(((-1.0)*(py*py*py*py)*(r00*r00)*(sj0*sj0)))+(((8.8e-7)*px*py*pz*r01*r02*sj0))+(((-9.328e-8)*cj0*py*pz*(r02*r02)))+(((-4.4e-7)*cj0*(py*py*py)*(r01*r01)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((-0.129888)*py*pz*r01*r02))+(((4.4e-9)*px*sj0*(r00*r00)))+(((-4.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r02*r02)))+(((12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-0.0449440000000484)*(px*px)*(r00*r00)))+(((-0.848)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-0.0898880000000968)*px*py*r00*r01)));
op[1]=((((1.696)*px*sj0*(py*py)*(r01*r01)))+(((1.696)*cj0*pz*r01*r02*(px*px)))+(((-0.00848)*cj0*py*(r01*r01)))+(((0.179775999999806)*px*py*r01*r02*sj0))+(((-8.8e-7)*r00*r02*(px*px*px)))+(((-8.8e-7)*pz*(px*px)*(r02*r02)))+(((-0.179775999999806)*cj0*px*pz*r00*r01))+(((-0.848)*cj0*py*(pz*pz)*(r01*r01)))+(((-0.848)*cj0*px*r00*r01*(pz*pz)))+(((-0.848)*cj0*(py*py*py)*(r01*r01)))+(((1.8656e-7)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-1.696)*cj0*px*py*pz*r00*r02))+(((-8.8e-7)*px*r00*r02*(py*py)))+(((-8.8e-7)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-0.848)*px*sj0*(py*py)*(r00*r00)))+(((-2.64e-6)*cj0*py*r00*r02*sj0*(px*px)))+(((0.01696)*pz*r00*r02*sj0))+(((-1.8656e-7)*(cj0*cj0)*(py*py)*(r01*r01)))+(((-8.8e-9)*cj0*py*r00*r02*sj0))+(((2.544)*py*r00*r01*sj0*(px*px)))+(((8.8e-9)*px*r00*r02))+(((-1.76e-6)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.848)*sj0*(px*px*px)*(r00*r00)))+(((-0.179775999999806)*r00*r02*sj0*(py*py)))+(((1.8656e-7)*(cj0*cj0)*(px*px)*(r01*r01)))+(((1.76e-6)*pz*(px*px)*(r02*r02)*(sj0*sj0)))+(((8.8e-7)*(pz*pz*pz)*(r00*r00)*(sj0*sj0)))+(((-3.7312e-7)*py*pz*r01*r02*(cj0*cj0)))+(((-0.179775999999806)*cj0*py*pz*(r01*r01)))+(((-1.696)*pz*r00*r02*sj0*(py*py)))+(((1.8656e-9)*(r02*r02)))+(((1.76e-8)*cj0*pz*r00*r01*sj0))+(((-2.64e-6)*py*r01*r02*(cj0*cj0)*(pz*pz)))+(((1.76e-6)*pz*(px*px)*(r00*r00)))+(((0.179775999999806)*px*pz*sj0*(r02*r02)))+(((1.76e-6)*cj0*px*py*pz*sj0*(r01*r01)))+(((8.8e-9)*py*r01*r02*(cj0*cj0)))+(((-3.7312e-7)*px*pz*r00*r02*(sj0*sj0)))+(((3.7312e-7)*cj0*px*py*sj0*(r00*r00)))+(((-0.00848)*px*sj0*(r02*r02)))+(((-3.52e-6)*cj0*px*py*pz*sj0*(r02*r02)))+(((3.7312e-7)*cj0*py*pz*r00*r02*sj0))+(((-1.8656e-7)*(px*px)*(r02*r02)))+(((8.8e-7)*pz*(py*py)*(r00*r00)*(sj0*sj0)))+(((-0.848)*cj0*py*(px*px)*(r02*r02)))+(((-8.8e-9)*pz*(cj0*cj0)*(r01*r01)))+(((0.848)*sj0*(px*px*px)*(r02*r02)))+(((1.8656e-7)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((0.00848)*py*r00*r01*sj0))+(((3.7312e-7)*cj0*px*py*sj0*(r01*r01)))+(((-8.8e-7)*pz*(py*py)*(r02*r02)))+(((8.8e-7)*cj0*r01*r02*sj0*(px*px*px)))+(((-1.76e-6)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-1.8656e-9)*(cj0*cj0)*(r01*r01)))+(((2.64e-6)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-3.7312e-7)*cj0*r00*r01*sj0*(pz*pz)))+(((3.7312e-7)*cj0*px*pz*r01*r02*sj0))+(((2.64e-6)*py*r01*r02*(pz*pz)))+(((0.179775999999806)*cj0*r01*r02*(px*px)))+(((-0.01696)*cj0*pz*r01*r02))+(((8.8e-9)*py*r01*r02))+(((1.76e-6)*pz*(cj0*cj0)*(py*py)*(r02*r02)))+(((8.8e-7)*(cj0*cj0)*(pz*pz*pz)*(r01*r01)))+(((2.64e-6)*px*r00*r02*(pz*pz)))+(((1.76e-6)*pz*(py*py)*(r01*r01)))+(((0.848)*py*r00*r01*sj0*(pz*pz)))+(((8.8e-9)*px*r00*r02*(sj0*sj0)))+(((2.64e-6)*cj0*py*r00*r02*sj0*(pz*pz)))+(((0.848)*px*sj0*(py*py)*(r02*r02)))+(((3.52e-6)*px*py*pz*r00*r01))+(((8.8e-7)*(pz*pz*pz)*(r02*r02)))+(((-0.179775999999806)*cj0*px*py*r00*r02))+(((-0.00179775999999806)*cj0*r01*r02))+(((1.8656e-7)*(cj0*cj0)*(pz*pz)*(r01*r01)))+(((-2.64e-6)*px*r00*r02*(pz*pz)*(sj0*sj0)))+(((0.00848)*px*sj0*(r00*r00)))+(((-0.848)*cj0*py*(pz*pz)*(r02*r02)))+(((-0.848)*cj0*(py*py*py)*(r02*r02)))+(((0.179775999999806)*px*pz*sj0*(r00*r00)))+(((1.8656e-7)*(pz*pz)*(r02*r02)))+(((1.696)*px*py*pz*r01*r02*sj0))+(((0.00848)*cj0*py*(r02*r02)))+(((-1.696)*cj0*py*(px*px)*(r00*r00)))+(((-8.8e-7)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-8.8e-9)*cj0*px*r01*r02*sj0))+(((0.848)*cj0*py*(px*px)*(r01*r01)))+(((-1.76e-6)*px*py*pz*r00*r01*(sj0*sj0)))+(((-8.8e-7)*pz*(px*px)*(r00*r00)*(sj0*sj0)))+(((8.8e-7)*r00*r02*(px*px*px)*(sj0*sj0)))+(((-0.848)*r00*r01*sj0*(py*py*py)))+(((-0.00848)*cj0*px*r00*r01))+(((-8.8e-7)*py*r01*r02*(px*px)))+(((-2.64e-6)*cj0*px*r01*r02*sj0*(py*py)))+(((-3.7312e-7)*px*py*r00*r01*(cj0*cj0)))+(((3.7312e-7)*px*pz*r00*r02))+(((-1.8656e-9)*(r00*r00)*(sj0*sj0)))+(((-1.8656e-7)*(py*py)*(r02*r02)))+(((1.76e-6)*cj0*px*py*pz*sj0*(r00*r00)))+(((-8.8e-7)*r01*r02*(py*py*py)))+(((0.179775999999806)*py*pz*r00*r01*sj0))+(((8.8e-7)*cj0*r00*r02*sj0*(py*py*py)))+(((8.8e-9)*pz*(r02*r02)))+(((0.848)*px*sj0*(pz*pz)*(r00*r00)))+(((1.76e-6)*py*r01*r02*(px*px)*(sj0*sj0)))+(((0.848)*px*sj0*(pz*pz)*(r02*r02)))+(((8.8e-7)*pz*(cj0*cj0)*(px*px)*(r01*r01)))+(((-8.8e-9)*pz*(r00*r00)*(sj0*sj0)))+(((3.7312e-7)*py*pz*r01*r02))+(((-0.179775999999806)*cj0*py*pz*(r02*r02)))+(((0.00179775999999806)*r00*r02*sj0))+(((-3.7312e-7)*px*py*r00*r01*(sj0*sj0)))+(((-1.8656e-7)*(px*px)*(r00*r00)*(sj0*sj0)))+(((-2.544)*cj0*px*r00*r01*(py*py)))+(((0.848)*cj0*r00*r01*(px*px*px)))+(((-8.8e-7)*pz*(cj0*cj0)*(py*py)*(r01*r01)))+(((1.76e-6)*px*r00*r02*(cj0*cj0)*(py*py)))+(((8.8e-7)*r01*r02*(cj0*cj0)*(py*py*py)))+(((3.7312e-9)*cj0*r00*r01*sj0)));
op[2]=((((-8.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-2.0)*(px*px*px*px)*(r00*r00)*(sj0*sj0)))+(((-8.0)*px*r00*r02*(pz*pz*pz)))+(((-0.139775999999903)*(px*px)*(r02*r02)))+(((-2.0)*(pz*pz*pz*pz)*(r00*r00)*(sj0*sj0)))+(((-2.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r01*r01)))+(((-8.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((8.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((-2.0)*(cj0*cj0)*(px*px*px*px)*(r01*r01)))+(((-2.0)*(px*px*px*px)*(r02*r02)))+(((0.129887999999806)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((0.00219775999999613)*cj0*r00*r01*sj0))+(((5.5968e-7)*cj0*px*py*r00*r02))+(((-0.259775999999613)*px*py*r00*r01*(sj0*sj0)))+(((4.0)*(px*px)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((8.0)*px*r00*r02*(pz*pz*pz)*(sj0*sj0)))+(((4.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-2.0)*(py*py*py*py)*(r00*r00)*(sj0*sj0)))+(((24.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-8.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-8.0)*(px*px)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((8.0)*pz*r01*r02*(py*py*py)))+(((-5.5968e-9)*r00*r02*sj0))+(((-4.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((-8.0)*py*r01*r02*(pz*pz*pz)))+(((0.0997759999996128)*px*pz*r00*r02))+(((-0.259775999999613)*py*pz*r01*r02*(cj0*cj0)))+(((4.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-2.0)*(pz*pz*pz*pz)*(r02*r02)))+(((-0.139775999999903)*(py*py)*(r02*r02)))+(((0.259775999999613)*cj0*px*pz*r01*r02*sj0))+(((-0.00109887999999806)*(cj0*cj0)*(r01*r01)))+(((-8.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((-8.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r02*r02)))+(((8.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((0.0997759999996128)*py*pz*r01*r02))+(((24.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((-5.5968e-7)*px*pz*sj0*(r02*r02)))+(((-8.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-5.5968e-7)*py*pz*r00*r01*sj0))+(((-8.0)*pz*r00*r02*(px*px*px)*(sj0*sj0)))+(((8.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((8.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((-4.0)*(px*px)*(py*py)*(r02*r02)))+(((-16.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((8.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((-8.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((4.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((-5.5968e-7)*px*pz*sj0*(r00*r00)))+(((8.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((0.129887999999806)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-4.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r01*r01)))+(((24.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((0.0498879999998064)*(pz*pz)*(r02*r02)))+(((4.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r01*r01)))+(((8.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((0.129887999999806)*(cj0*cj0)*(px*px)*(r01*r01)))+(((-16.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((8.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((8.0)*py*r01*r02*(cj0*cj0)*(pz*pz*pz)))+(((-0.259775999999613)*px*py*r00*r01*(cj0*cj0)))+(((-8.0)*pz*r01*r02*(cj0*cj0)*(py*py*py)))+(((16.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((-8.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-0.259775999999613)*cj0*r00*r01*sj0*(pz*pz)))+(((8.0)*py*pz*r01*r02*(px*px)))+(((-16.0)*px*py*r00*r01*(pz*pz)))+(((-0.259775999999613)*px*pz*r00*r02*(sj0*sj0)))+(((5.5968e-7)*cj0*py*pz*(r01*r01)))+(((0.259775999999613)*cj0*px*py*sj0*(r00*r00)))+(((4.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-8.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-2.0)*(py*py*py*py)*(r02*r02)))+(((5.5968e-9)*cj0*r01*r02))+(((0.129887999999806)*(cj0*cj0)*(pz*pz)*(r01*r01)))+(((-0.129887999999806)*(px*px)*(r00*r00)*(sj0*sj0)))+(((0.00159775999999903)*(r02*r02)))+(((-5.5968e-7)*cj0*r01*r02*(px*px)))+(((-2.0)*(cj0*cj0)*(py*py*py*py)*(r01*r01)))+(((-0.129887999999806)*(cj0*cj0)*(py*py)*(r01*r01)))+(((-8.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((5.5968e-7)*cj0*py*pz*(r02*r02)))+(((-8.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((8.0)*pz*r00*r02*(px*px*px)))+(((-5.5968e-7)*px*py*r01*r02*sj0))+(((0.259775999999613)*cj0*px*py*sj0*(r01*r01)))+(((-4.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((8.0)*px*pz*r00*r02*(py*py)))+(((-0.0898880000000968)*(py*py)*(r01*r01)))+(((-8.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((5.5968e-7)*cj0*px*pz*r00*r01))+(((-8.0)*(py*py)*(pz*pz)*(r01*r01)))+(((4.0)*(py*py)*(pz*pz)*(r02*r02)))+(((-0.00109887999999806)*(r00*r00)*(sj0*sj0)))+(((-0.179776000000194)*px*py*r00*r01))+(((-8.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-8.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((0.259775999999613)*cj0*py*pz*r00*r02*sj0))+(((5.5968e-7)*r00*r02*sj0*(py*py)))+(((-4.0)*(py*py)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((-0.0898880000000968)*(px*px)*(r00*r00))));
op[3]=((((1.696)*px*sj0*(py*py)*(r01*r01)))+(((1.696)*cj0*pz*r01*r02*(px*px)))+(((-3.7312e-9)*cj0*r00*r01*sj0))+(((-0.00848)*cj0*py*(r01*r01)))+(((-3.7312e-7)*px*pz*r00*r02))+(((0.179775999999806)*r00*r02*sj0*(py*py)))+(((-3.7312e-7)*cj0*px*py*sj0*(r01*r01)))+(((-8.8e-7)*r00*r02*(px*px*px)))+(((-8.8e-7)*pz*(px*px)*(r02*r02)))+(((-0.179775999999806)*px*py*r01*r02*sj0))+(((-0.848)*cj0*py*(pz*pz)*(r01*r01)))+(((-0.848)*cj0*px*r00*r01*(pz*pz)))+(((-3.7312e-7)*cj0*px*pz*r01*r02*sj0))+(((-0.848)*cj0*(py*py*py)*(r01*r01)))+(((-1.696)*cj0*px*py*pz*r00*r02))+(((-8.8e-7)*px*r00*r02*(py*py)))+(((-8.8e-7)*py*r01*r02*(cj0*cj0)*(px*px)))+(((-0.848)*px*sj0*(py*py)*(r00*r00)))+(((1.8656e-9)*(cj0*cj0)*(r01*r01)))+(((-2.64e-6)*cj0*py*r00*r02*sj0*(px*px)))+(((3.7312e-7)*px*py*r00*r01*(cj0*cj0)))+(((-1.8656e-7)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((1.8656e-7)*(px*px)*(r00*r00)*(sj0*sj0)))+(((0.01696)*pz*r00*r02*sj0))+(((-8.8e-9)*cj0*py*r00*r02*sj0))+(((2.544)*py*r00*r01*sj0*(px*px)))+(((8.8e-9)*px*r00*r02))+(((-1.76e-6)*px*py*pz*r00*r01*(cj0*cj0)))+(((0.848)*sj0*(px*px*px)*(r00*r00)))+(((3.7312e-7)*px*pz*r00*r02*(sj0*sj0)))+(((0.179775999999806)*cj0*py*pz*(r02*r02)))+(((1.76e-6)*pz*(px*px)*(r02*r02)*(sj0*sj0)))+(((8.8e-7)*(pz*pz*pz)*(r00*r00)*(sj0*sj0)))+(((0.00179775999999806)*cj0*r01*r02))+(((-1.8656e-7)*(cj0*cj0)*(px*px)*(r01*r01)))+(((-1.696)*pz*r00*r02*sj0*(py*py)))+(((1.76e-8)*cj0*pz*r00*r01*sj0))+(((-2.64e-6)*py*r01*r02*(cj0*cj0)*(pz*pz)))+(((3.7312e-7)*cj0*r00*r01*sj0*(pz*pz)))+(((-0.179775999999806)*py*pz*r00*r01*sj0))+(((1.76e-6)*pz*(px*px)*(r00*r00)))+(((1.76e-6)*cj0*px*py*pz*sj0*(r01*r01)))+(((8.8e-9)*py*r01*r02*(cj0*cj0)))+(((-0.00848)*px*sj0*(r02*r02)))+(((-3.52e-6)*cj0*px*py*pz*sj0*(r02*r02)))+(((8.8e-7)*pz*(py*py)*(r00*r00)*(sj0*sj0)))+(((-0.848)*cj0*py*(px*px)*(r02*r02)))+(((-8.8e-9)*pz*(cj0*cj0)*(r01*r01)))+(((0.179775999999806)*cj0*px*pz*r00*r01))+(((0.848)*sj0*(px*px*px)*(r02*r02)))+(((1.8656e-7)*(py*py)*(r02*r02)))+(((0.00848)*py*r00*r01*sj0))+(((-0.179775999999806)*cj0*r01*r02*(px*px)))+(((-8.8e-7)*pz*(py*py)*(r02*r02)))+(((8.8e-7)*cj0*r01*r02*sj0*(px*px*px)))+(((-1.76e-6)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-1.8656e-7)*(py*py)*(r00*r00)*(sj0*sj0)))+(((2.64e-6)*cj0*px*r01*r02*sj0*(pz*pz)))+(((2.64e-6)*py*r01*r02*(pz*pz)))+(((-0.01696)*cj0*pz*r01*r02))+(((8.8e-9)*py*r01*r02))+(((1.76e-6)*pz*(cj0*cj0)*(py*py)*(r02*r02)))+(((-1.8656e-7)*(cj0*cj0)*(pz*pz)*(r01*r01)))+(((8.8e-7)*(cj0*cj0)*(pz*pz*pz)*(r01*r01)))+(((2.64e-6)*px*r00*r02*(pz*pz)))+(((1.76e-6)*pz*(py*py)*(r01*r01)))+(((0.848)*py*r00*r01*sj0*(pz*pz)))+(((-3.7312e-7)*cj0*px*py*sj0*(r00*r00)))+(((8.8e-9)*px*r00*r02*(sj0*sj0)))+(((-0.179775999999806)*px*pz*sj0*(r02*r02)))+(((2.64e-6)*cj0*py*r00*r02*sj0*(pz*pz)))+(((0.848)*px*sj0*(py*py)*(r02*r02)))+(((3.52e-6)*px*py*pz*r00*r01))+(((8.8e-7)*(pz*pz*pz)*(r02*r02)))+(((1.8656e-7)*(cj0*cj0)*(py*py)*(r01*r01)))+(((-2.64e-6)*px*r00*r02*(pz*pz)*(sj0*sj0)))+(((0.00848)*px*sj0*(r00*r00)))+(((-0.848)*cj0*py*(pz*pz)*(r02*r02)))+(((-0.848)*cj0*(py*py*py)*(r02*r02)))+(((1.696)*px*py*pz*r01*r02*sj0))+(((0.00848)*cj0*py*(r02*r02)))+(((-1.696)*cj0*py*(px*px)*(r00*r00)))+(((3.7312e-7)*px*py*r00*r01*(sj0*sj0)))+(((-8.8e-7)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-1.8656e-9)*(r02*r02)))+(((-3.7312e-7)*cj0*py*pz*r00*r02*sj0))+(((-8.8e-9)*cj0*px*r01*r02*sj0))+(((0.848)*cj0*py*(px*px)*(r01*r01)))+(((-1.76e-6)*px*py*pz*r00*r01*(sj0*sj0)))+(((1.8656e-7)*(px*px)*(r02*r02)))+(((-8.8e-7)*pz*(px*px)*(r00*r00)*(sj0*sj0)))+(((8.8e-7)*r00*r02*(px*px*px)*(sj0*sj0)))+(((-0.848)*r00*r01*sj0*(py*py*py)))+(((-0.00848)*cj0*px*r00*r01))+(((-8.8e-7)*py*r01*r02*(px*px)))+(((-1.8656e-7)*(pz*pz)*(r02*r02)))+(((-2.64e-6)*cj0*px*r01*r02*sj0*(py*py)))+(((-0.179775999999806)*px*pz*sj0*(r00*r00)))+(((0.179775999999806)*cj0*py*pz*(r01*r01)))+(((-0.00179775999999806)*r00*r02*sj0))+(((1.76e-6)*cj0*px*py*pz*sj0*(r00*r00)))+(((-8.8e-7)*r01*r02*(py*py*py)))+(((8.8e-7)*cj0*r00*r02*sj0*(py*py*py)))+(((8.8e-9)*pz*(r02*r02)))+(((3.7312e-7)*py*pz*r01*r02*(cj0*cj0)))+(((0.848)*px*sj0*(pz*pz)*(r00*r00)))+(((0.179775999999806)*cj0*px*py*r00*r02))+(((1.76e-6)*py*r01*r02*(px*px)*(sj0*sj0)))+(((0.848)*px*sj0*(pz*pz)*(r02*r02)))+(((8.8e-7)*pz*(cj0*cj0)*(px*px)*(r01*r01)))+(((1.8656e-9)*(r00*r00)*(sj0*sj0)))+(((-3.7312e-7)*py*pz*r01*r02))+(((-8.8e-9)*pz*(r00*r00)*(sj0*sj0)))+(((-2.544)*cj0*px*r00*r01*(py*py)))+(((0.848)*cj0*r00*r01*(px*px*px)))+(((-8.8e-7)*pz*(cj0*cj0)*(py*py)*(r01*r01)))+(((1.76e-6)*px*r00*r02*(cj0*cj0)*(py*py)))+(((8.8e-7)*r01*r02*(cj0*cj0)*(py*py*py))));
op[4]=((((1.32e-6)*cj0*px*r00*r01*(py*py)))+(((-1.0)*(cj0*cj0)*(py*py*py*py)*(r01*r01)))+(((4.4e-7)*cj0*px*r00*r01*(pz*pz)))+(((8.8e-7)*cj0*py*(px*px)*(r00*r00)))+(((-8.0)*px*pz*r00*r02*(cj0*cj0)*(py*py)))+(((0.00424)*py*r01*r02))+(((2.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r01*r01)))+(((-4.0)*cj0*pz*r01*r02*sj0*(px*px*px)))+(((2.0)*cj0*r00*r01*sj0*(pz*pz*pz*pz)))+(((4.0)*py*r00*r01*(cj0*cj0)*(px*px*px)))+(((8.0)*cj0*px*py*sj0*(pz*pz)*(r02*r02)))+(((0.0199999999999516)*(px*px)*(r02*r02)))+(((-8.0)*py*pz*r01*r02*(px*px)*(sj0*sj0)))+(((4.0)*cj0*py*sj0*(px*px*px)*(r00*r00)))+(((-1.272)*cj0*px*r01*r02*sj0*(py*py)))+(((0.0199999999999516)*(py*py)*(r02*r02)))+(((-4.0)*(px*px)*(pz*pz)*(r02*r02)*(sj0*sj0)))+(((-4.0)*(px*px)*(pz*pz)*(r00*r00)))+(((-0.848)*px*py*pz*r00*r01*(sj0*sj0)))+(((-4.4e-7)*cj0*py*(px*px)*(r01*r01)))+(((-0.024944)*(cj0*cj0)*(px*px)*(r01*r01)))+(((-4.4e-7)*py*r00*r01*sj0*(pz*pz)))+(((-4.0)*px*r00*r01*(cj0*cj0)*(py*py*py)))+(((0.424)*cj0*r01*r02*sj0*(px*px*px)))+(((-0.424)*py*r01*r02*(cj0*cj0)*(px*px)))+(((2.0)*(px*px)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-1.0)*(px*px*px*px)*(r00*r00)*(sj0*sj0)))+(((-4.4e-9)*cj0*py*(r02*r02)))+(((1.272)*cj0*px*r01*r02*sj0*(pz*pz)))+(((-0.024944)*(py*py)*(r00*r00)*(sj0*sj0)))+(((-1.0)*(cj0*cj0)*(pz*pz*pz*pz)*(r01*r01)))+(((0.848)*py*r01*r02*(px*px)*(sj0*sj0)))+(((-4.0)*cj0*px*r01*r02*sj0*(pz*pz*pz)))+(((-1.272)*px*r00*r02*(pz*pz)*(sj0*sj0)))+(((0.00424)*px*r00*r02))+(((-4.0)*py*r00*r01*(px*px*px)*(sj0*sj0)))+(((-1.32e-6)*py*r00*r01*sj0*(px*px)))+(((4.0)*px*py*r00*r01*(cj0*cj0)*(pz*pz)))+(((4.4e-7)*cj0*py*(pz*pz)*(r02*r02)))+(((12.0)*cj0*px*pz*r01*r02*sj0*(py*py)))+(((-4.0)*cj0*py*r00*r02*sj0*(pz*pz*pz)))+(((0.424)*cj0*r00*r02*sj0*(py*py*py)))+(((-4.4e-7)*px*sj0*(pz*pz)*(r02*r02)))+(((9.328e-10)*r00*r02*sj0))+(((-0.024944)*(cj0*cj0)*(pz*pz)*(r01*r01)))+(((0.049888)*px*py*r00*r01*(cj0*cj0)))+(((-2.0)*(px*px)*(py*py)*(r02*r02)))+(((-4.0)*cj0*px*py*sj0*(pz*pz)*(r01*r01)))+(((-8.0)*px*py*r00*r01*(pz*pz)))+(((-0.024944)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((0.848)*cj0*px*py*pz*sj0*(r01*r01)))+(((2.0)*(cj0*cj0)*(px*px)*(py*py)*(r01*r01)))+(((-0.424)*py*r01*r02*(px*px)))+(((0.424)*(pz*pz*pz)*(r02*r02)))+(((0.424)*(pz*pz*pz)*(r00*r00)*(sj0*sj0)))+(((0.424)*(cj0*cj0)*(pz*pz*pz)*(r01*r01)))+(((0.424)*r00*r02*(px*px*px)*(sj0*sj0)))+(((-4.0)*cj0*px*sj0*(py*py*py)*(r00*r00)))+(((-2.0)*cj0*r00*r01*sj0*(py*py*py*py)))+(((2.0)*(px*px)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((-9.328e-8)*cj0*px*py*r00*r02))+(((-1.272)*cj0*py*r00*r02*sj0*(px*px)))+(((0.049888)*px*py*r00*r01*(sj0*sj0)))+(((4.4e-7)*px*sj0*(py*py)*(r00*r00)))+(((4.0)*pz*r01*r02*(py*py*py)))+(((-4.4e-9)*py*r00*r01*sj0))+(((0.024944)*(px*px)*(r00*r00)*(sj0*sj0)))+(((0.848)*cj0*px*py*pz*sj0*(r00*r00)))+(((0.00424)*px*r00*r02*(sj0*sj0)))+(((-0.00069888)*cj0*r00*r01*sj0))+(((-0.848)*px*py*pz*r00*r01*(cj0*cj0)))+(((-0.424)*pz*(px*px)*(r02*r02)))+(((0.424)*pz*(cj0*cj0)*(px*px)*(r01*r01)))+(((-4.4e-7)*cj0*r00*r01*(px*px*px)))+(((-4.0)*py*r01*r02*(pz*pz*pz)))+(((-8.8e-9)*pz*r00*r02*sj0))+(((-4.0)*cj0*pz*r00*r02*sj0*(py*py*py)))+(((-0.424)*px*r00*r02*(py*py)))+(((0.00034944)*(cj0*cj0)*(r01*r01)))+(((-4.0)*cj0*py*sj0*(px*px*px)*(r01*r01)))+(((4.0)*px*r00*r01*(py*py*py)*(sj0*sj0)))+(((4.0)*py*pz*r01*r02*(px*px)))+(((9.328e-8)*py*pz*r00*r01*sj0))+(((1.272)*py*r01*r02*(pz*pz)))+(((4.4e-7)*cj0*py*(pz*pz)*(r01*r01)))+(((-9.328e-8)*r00*r02*sj0*(py*py)))+(((-0.424)*r01*r02*(py*py*py)))+(((9.328e-8)*px*pz*sj0*(r00*r00)))+(((-0.00424)*cj0*px*r01*r02*sj0))+(((4.0)*cj0*px*sj0*(py*py*py)*(r01*r01)))+(((4.0)*pz*r00*r02*(px*px*px)))+(((4.4e-7)*cj0*(py*py*py)*(r02*r02)))+(((0.049888)*cj0*r00*r01*sj0*(pz*pz)))+(((-0.049888)*cj0*py*pz*r00*r02*sj0))+(((0.424)*pz*(py*py)*(r00*r00)*(sj0*sj0)))+(((-0.00424)*pz*(cj0*cj0)*(r01*r01)))+(((1.272)*cj0*py*r00*r02*sj0*(pz*pz)))+(((-0.049888)*cj0*px*pz*r01*r02*sj0))+(((-0.049888)*cj0*px*py*sj0*(r01*r01)))+(((-0.00424)*cj0*py*r00*r02*sj0))+(((-4.0)*pz*r01*r02*(cj0*cj0)*(py*py*py)))+(((0.00424)*py*r01*r02*(cj0*cj0)))+(((-4.0)*cj0*px*py*sj0*(pz*pz)*(r00*r00)))+(((-4.0)*pz*r00*r02*(px*px*px)*(sj0*sj0)))+(((0.024944)*(cj0*cj0)*(py*py)*(r01*r01)))+(((-2.0)*(py*py)*(pz*pz)*(r00*r00)*(sj0*sj0)))+(((-0.424)*px*r00*r02*(py*py)*(sj0*sj0)))+(((-9.328e-8)*cj0*py*pz*(r01*r01)))+(((2.0)*(px*px)*(pz*pz)*(r02*r02)))+(((-9.328e-10)*cj0*r01*r02))+(((-0.848)*cj0*r00*r01*sj0*(pz*pz*pz)))+(((-1.0)*(py*py*py*py)*(r02*r02)))+(((-2.0)*(cj0*cj0)*(px*px)*(pz*pz)*(r01*r01)))+(((-0.00424)*pz*(r00*r00)*(sj0*sj0)))+(((4.0)*px*r00*r02*(pz*pz*pz)*(sj0*sj0)))+(((-4.4e-7)*px*sj0*(py*py)*(r02*r02)))+(((-1.696)*cj0*px*py*pz*sj0*(r02*r02)))+(((0.00034944)*(r00*r00)*(sj0*sj0)))+(((-8.8e-7)*px*sj0*(py*py)*(r01*r01)))+(((8.8e-7)*cj0*px*py*pz*r00*r02))+(((4.4e-9)*cj0*px*r00*r01))+(((-2.0)*cj0*r00*r01*sj0*(px*px*px*px)))+(((0.049888)*px*pz*r00*r02*(sj0*sj0)))+(((-0.424)*r00*r02*(px*px*px)))+(((-1.0)*(pz*pz*pz*pz)*(r00*r00)*(sj0*sj0)))+(((4.0)*px*pz*r00*r02*(py*py)*(sj0*sj0)))+(((-0.424)*pz*(px*px)*(r00*r00)*(sj0*sj0)))+(((9.328e-8)*px*pz*sj0*(r02*r02)))+(((0.848)*pz*(py*py)*(r01*r01)))+(((-8.8e-7)*cj0*pz*r01*r02*(px*px)))+(((0.424)*r01*r02*(cj0*cj0)*(py*py*py)))+(((-4.4e-7)*sj0*(px*px*px)*(r02*r02)))+(((4.0)*py*r01*r02*(cj0*cj0)*(pz*pz*pz)))+(((8.8e-9)*cj0*pz*r01*r02))+(((9.328e-8)*px*py*r01*r02*sj0))+(((-4.0)*(cj0*cj0)*(px*px)*(py*py)*(r00*r00)))+(((9.328e-8)*cj0*r01*r02*(px*px)))+(((-4.0)*(py*py)*(pz*pz)*(r01*r01)))+(((-1.0)*(pz*pz*pz*pz)*(r02*r02)))+(((-4.4e-7)*sj0*(px*px*px)*(r00*r00)))+(((12.0)*cj0*r00*r01*sj0*(px*px)*(py*py)))+(((-4.0)*px*r00*r02*(pz*pz*pz)))+(((-9.328e-8)*cj0*px*pz*r00*r01))+(((0.848)*px*r00*r02*(cj0*cj0)*(py*py)))+(((-9.9999999999516e-5)*(r02*r02)))+(((-4.4e-7)*px*sj0*(pz*pz)*(r00*r00)))+(((-0.0449440000000484)*(py*py)*(r01*r01)))+(((-0.424)*pz*(cj0*cj0)*(py*py)*(r01*r01)))+(((0.848)*pz*(px*px)*(r02*r02)*(sj0*sj0)))+(((0.00424)*pz*(r02*r02)))+(((8.8e-7)*pz*r00*r02*sj0*(py*py)))+(((4.0)*px*py*r00*r01*(pz*pz)*(sj0*sj0)))+(((4.4e-9)*cj0*py*(r01*r01)))+(((-0.129888)*px*pz*r00*r02))+(((-8.8e-7)*px*py*pz*r01*r02*sj0))+(((4.0)*py*pz*r01*r02*(cj0*cj0)*(px*px)))+(((-0.049888)*cj0*px*py*sj0*(r00*r00)))+(((4.0)*px*pz*r00*r02*(py*py)))+(((2.0)*(py*py)*(pz*pz)*(r02*r02)))+(((0.848)*pz*(px*px)*(r00*r00)))+(((1.696)*px*py*pz*r00*r01))+(((0.848)*pz*(cj0*cj0)*(py*py)*(r02*r02)))+(((4.4e-9)*px*sj0*(r02*r02)))+(((-0.064944)*(pz*pz)*(r02*r02)))+(((1.272)*px*r00*r02*(pz*pz)))+(((0.00848)*cj0*pz*r00*r01*sj0))+(((0.049888)*py*pz*r01*r02*(cj0*cj0)))+(((-1.272)*py*r01*r02*(cj0*cj0)*(pz*pz)))+(((-4.0)*(px*px)*(py*py)*(r01*r01)*(sj0*sj0)))+(((-1.0)*(cj0*cj0)*(px*px*px*px)*(r01*r01)))+(((-1.0)*(py*py*py*py)*(r00*r00)*(sj0*sj0)))+(((4.4e-7)*cj0*py*(px*px)*(r02*r02)))+(((-9.328e-8)*cj0*py*pz*(r02*r02)))+(((-0.424)*pz*(py*py)*(r02*r02)))+(((-1.0)*(px*px*px*px)*(r02*r02)))+(((-4.4e-9)*px*sj0*(r00*r00)))+(((-0.129888)*py*pz*r01*r02))+(((-4.0)*(cj0*cj0)*(py*py)*(pz*pz)*(r02*r02)))+(((12.0)*cj0*py*pz*r00*r02*sj0*(px*px)))+(((4.4e-7)*cj0*(py*py*py)*(r01*r01)))+(((4.4e-7)*r00*r01*sj0*(py*py*py)))+(((-0.0449440000000484)*(px*px)*(r00*r00)))+(((-0.0898880000000968)*px*py*r00*r01)));
polyroots4(op,zeror,numroots);
IkReal j1array[4], cj1array[4], sj1array[4], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[4]={true,true,true,true};
_nj1 = 4;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
sj5array[0]=((((-1.0)*r01*sj0))+(((-1.0)*cj0*r00)));
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j3eval[2];
j3eval[0]=cj5;
j3eval[1]=IKsign(cj5);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x32=(px*sj0);
IkReal x33=((9.99999999999462)*sj1);
IkReal x34=((1.03773584905605e-5)*cj1);
IkReal x35=(cj0*py);
if( (((-0.471698113207293)+(((-9.99999999999462)*cj1*pz))+(((-1.0)*x32*x33))+(((47.1698113207293)*(py*py)))+(((47.1698113207293)*(pz*pz)))+(((-1.03773584905605e-5)*pz*sj1))+(((47.1698113207293)*(px*px)))+(((-1.0)*x34*x35))+((x32*x34))+((x33*x35)))) < -1-IKFAST_SINCOS_THRESH || (((-0.471698113207293)+(((-9.99999999999462)*cj1*pz))+(((-1.0)*x32*x33))+(((47.1698113207293)*(py*py)))+(((47.1698113207293)*(pz*pz)))+(((-1.03773584905605e-5)*pz*sj1))+(((47.1698113207293)*(px*px)))+(((-1.0)*x34*x35))+((x32*x34))+((x33*x35)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x36=IKasin(((-0.471698113207293)+(((-9.99999999999462)*cj1*pz))+(((-1.0)*x32*x33))+(((47.1698113207293)*(py*py)))+(((47.1698113207293)*(pz*pz)))+(((-1.03773584905605e-5)*pz*sj1))+(((47.1698113207293)*(px*px)))+(((-1.0)*x34*x35))+((x32*x34))+((x33*x35))));
j3array[0]=((-1.57079736453075)+(((1.0)*x36)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.57079528905905)+(((-1.0)*x36)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x37=px*px;
IkReal x38=py*py;
IkReal x39=pz*pz;
IkReal x40=((0.212)*py);
IkReal x41=(r00*sj1);
IkReal x42=(cj0*r00);
IkReal x43=(px*r01);
IkReal x44=((2.2e-7)*cj1);
IkReal x45=(r02*sj0);
IkReal x46=((2.0)*px);
IkReal x47=(cj0*r02);
IkReal x48=(py*r00);
IkReal x49=(r01*sj0);
IkReal x50=((2.2e-7)*sj1);
IkReal x51=((0.212)*cj1);
IkReal x52=((2.0)*py);
IkReal x53=((1.0)*x42);
evalcond[0]=((-0.0212360000000121)+(((-1.0)*cj1*x40*x45))+(((-0.0212)*(IKcos(j3))))+(((0.212)*sj1*x43))+((x37*x42))+((x38*x49))+((cj0*x43*x52))+(((-1.0)*x40*x41))+(((-1.0)*x39*x53))+(((-1.0)*x38*x53))+(((-1.0)*x43*x44))+(((2.2e-8)*(IKsin(j3))))+((pz*x45*x52))+(((-1.0)*x39*x49))+(((-1.0)*py*x45*x50))+(((-1.0)*px*x47*x51))+(((-1.0)*px*x47*x50))+((pz*x42*x51))+(((-1.0)*x37*x49))+((pz*x49*x50))+((pz*x49*x51))+((pz*x46*x47))+((sj0*x46*x48))+((x44*x48))+(((-0.0112360000000121)*x49))+(((-0.0112360000000121)*x42))+(((2.2e-7)*cj0*pz*x41)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j2eval[0]=((965272.727273277)+(((-1.0)*sj3))+(((963636.363636364)*cj3)));
j2eval[1]=IKsign(((0.0212360000000121)+(((-2.2e-8)*sj3))+(((0.0212)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x54=(px*sj0);
IkReal x55=((0.106)*cj1);
IkReal x56=(cj1*pz);
IkReal x57=((0.1)*cj3);
IkReal x58=(pz*sj1);
IkReal x59=((1.1e-7)*cj1);
IkReal x60=(cj0*py);
IkReal x61=((0.1)*sj1*sj3);
IkReal x62=(sj1*x60);
IkReal x63=((0.1)*cj1*sj3);
CheckValue<IkReal> x64 = IKatan2WithCheck(IkReal(((((1.1e-7)*x56))+(((1.1e-7)*sj1*x54))+((x60*x61))+(((-1.0)*cj1*x57*x60))+(((-1.0)*x55*x60))+(((1.1e-8)*cj3))+(((-1.0)*x54*x61))+(((-0.1)*sj3*x56))+(((0.0106)*sj3))+(((-1.1e-7)*x62))+((cj1*x54*x57))+(((-0.106)*x58))+(((-1.0)*x57*x58))+((x54*x55)))),IkReal(((-0.0112360000000121)+(((1.1e-7)*x58))+((x59*x60))+((sj1*x54*x57))+(((-1.0)*x54*x59))+(((0.106)*sj1*x54))+(((1.1e-8)*sj3))+(((-0.1)*sj3*x58))+((x56*x57))+((pz*x55))+(((-1.0)*x57*x62))+(((-0.106)*x62))+(((-1.0)*x60*x63))+((x54*x63))+(((-0.0106)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x64.valid){
continue;
}
CheckValue<IkReal> x65=IKPowWithIntegerCheck(IKsign(((0.0212360000000121)+(((-2.2e-8)*sj3))+(((0.0212)*cj3)))),-1);
if(!x65.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x64.value)+(((1.5707963267949)*(x65.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x66=IKsin(j2);
IkReal x67=IKcos(j2);
IkReal x68=((0.1)*sj3);
IkReal x69=(r01*sj0);
IkReal x70=(cj0*r00);
IkReal x71=(pz*sj1);
IkReal x72=(cj1*py);
IkReal x73=(r02*sj0);
IkReal x74=(cj0*r02);
IkReal x75=(py*sj1);
IkReal x76=(px*sj0);
IkReal x77=(cj1*px);
IkReal x78=((0.1)*cj3);
IkReal x79=((1.1e-7)*x66);
IkReal x80=((0.106)*x67);
IkReal x81=((1.1e-7)*x67);
IkReal x82=((0.106)*x66);
IkReal x83=((1.0)*cj1*pz);
IkReal x84=((1.0)*px*sj1);
IkReal x85=(x66*x68);
IkReal x86=(x67*x78);
IkReal x87=(x67*x68);
IkReal x88=(x66*x78);
IkReal x89=(x79+x80+x86);
IkReal x90=(x88+x82+x87);
evalcond[0]=((-1.1e-7)+(((-1.0)*cj1*x76))+((cj0*x72))+x71+x90+(((-1.0)*x81)));
evalcond[1]=((-0.106)+((cj1*pz))+(((-1.0)*cj0*x75))+x85+((sj1*x76))+(((-1.0)*x89)));
evalcond[2]=((((0.106)*x70))+(((-1.0)*x70*x83))+(((0.106)*x69))+x85+(((-1.0)*x69*x83))+((x72*x73))+(((-1.0)*x89))+((x74*x77))+((r00*x75))+(((-1.0)*r01*x84)));
evalcond[3]=(((x69*x71))+(((-1.1e-7)*x70))+x81+(((-1.0)*x74*x84))+(((-1.0)*r01*x77))+(((-1.0)*x90))+((x70*x71))+(((-1.1e-7)*x69))+(((-1.0)*x73*x75))+((r00*x72)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x91=(px*sj0);
IkReal x92=((9.99999999999462)*sj1);
IkReal x93=((1.03773584905605e-5)*cj1);
IkReal x94=(cj0*py);
if( (((-0.471698113207293)+(((-9.99999999999462)*cj1*pz))+((x92*x94))+(((-1.0)*x91*x92))+(((47.1698113207293)*(py*py)))+(((47.1698113207293)*(pz*pz)))+(((-1.03773584905605e-5)*pz*sj1))+(((47.1698113207293)*(px*px)))+(((-1.0)*x93*x94))+((x91*x93)))) < -1-IKFAST_SINCOS_THRESH || (((-0.471698113207293)+(((-9.99999999999462)*cj1*pz))+((x92*x94))+(((-1.0)*x91*x92))+(((47.1698113207293)*(py*py)))+(((47.1698113207293)*(pz*pz)))+(((-1.03773584905605e-5)*pz*sj1))+(((47.1698113207293)*(px*px)))+(((-1.0)*x93*x94))+((x91*x93)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x95=IKasin(((-0.471698113207293)+(((-9.99999999999462)*cj1*pz))+((x92*x94))+(((-1.0)*x91*x92))+(((47.1698113207293)*(py*py)))+(((47.1698113207293)*(pz*pz)))+(((-1.03773584905605e-5)*pz*sj1))+(((47.1698113207293)*(px*px)))+(((-1.0)*x93*x94))+((x91*x93))));
j3array[0]=((-1.57079736453075)+(((1.0)*x95)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.57079528905905)+(((-1.0)*x95)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x96=px*px;
IkReal x97=py*py;
IkReal x98=pz*pz;
IkReal x99=((0.212)*py);
IkReal x100=(r00*sj1);
IkReal x101=(cj0*r00);
IkReal x102=(px*r01);
IkReal x103=((2.2e-7)*cj1);
IkReal x104=(r02*sj0);
IkReal x105=((2.0)*px);
IkReal x106=(cj0*r02);
IkReal x107=(py*r00);
IkReal x108=(r01*sj0);
IkReal x109=((2.2e-7)*sj1);
IkReal x110=((0.212)*cj1);
IkReal x111=((2.0)*py);
IkReal x112=((1.0)*x101);
evalcond[0]=((0.0212360000000121)+(((-1.0)*px*x106*x110))+(((-1.0)*px*x106*x109))+((cj0*x102*x111))+((x101*x96))+((pz*x108*x109))+(((-1.0)*cj1*x104*x99))+((x103*x107))+(((-1.0)*x112*x97))+(((-1.0)*x112*x98))+((pz*x108*x110))+((x108*x97))+(((-2.2e-8)*(IKsin(j3))))+(((0.212)*sj1*x102))+(((-1.0)*py*x104*x109))+(((-1.0)*x102*x103))+(((-1.0)*x100*x99))+((pz*x105*x106))+(((-0.0112360000000121)*x101))+(((-0.0112360000000121)*x108))+((pz*x104*x111))+(((0.0212)*(IKcos(j3))))+((sj0*x105*x107))+(((-1.0)*x108*x98))+(((-1.0)*x108*x96))+(((2.2e-7)*cj0*pz*x100))+((pz*x101*x110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
j2eval[0]=((965272.727273277)+(((-1.0)*sj3))+(((963636.363636364)*cj3)));
j2eval[1]=IKsign(((0.0212360000000121)+(((-2.2e-8)*sj3))+(((0.0212)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x113=(px*sj0);
IkReal x114=((0.106)*cj1);
IkReal x115=(cj1*pz);
IkReal x116=((0.1)*cj3);
IkReal x117=(pz*sj1);
IkReal x118=((1.1e-7)*cj1);
IkReal x119=(cj0*py);
IkReal x120=((0.1)*sj1*sj3);
IkReal x121=(sj1*x119);
IkReal x122=((0.1)*cj1*sj3);
CheckValue<IkReal> x123 = IKatan2WithCheck(IkReal(((((-1.0)*x113*x120))+(((-1.0)*x116*x117))+(((-1.1e-7)*x121))+((x113*x114))+(((-1.0)*cj1*x116*x119))+(((1.1e-8)*cj3))+(((-1.0)*x114*x119))+(((-0.1)*sj3*x115))+(((1.1e-7)*x115))+(((1.1e-7)*sj1*x113))+(((0.0106)*sj3))+(((-0.106)*x117))+((x119*x120))+((cj1*x113*x116)))),IkReal(((-0.0112360000000121)+(((-1.0)*x119*x122))+((pz*x114))+(((-1.0)*x113*x118))+(((-1.0)*x116*x121))+((x113*x122))+(((-0.1)*sj3*x117))+(((1.1e-7)*x117))+(((-0.106)*x121))+(((1.1e-8)*sj3))+((x118*x119))+((x115*x116))+((sj1*x113*x116))+(((-0.0106)*cj3))+(((0.106)*sj1*x113)))),IKFAST_ATAN2_MAGTHRESH);
if(!x123.valid){
continue;
}
CheckValue<IkReal> x124=IKPowWithIntegerCheck(IKsign(((0.0212360000000121)+(((-2.2e-8)*sj3))+(((0.0212)*cj3)))),-1);
if(!x124.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x123.value)+(((1.5707963267949)*(x124.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x125=IKsin(j2);
IkReal x126=IKcos(j2);
IkReal x127=((0.1)*sj3);
IkReal x128=(r01*sj0);
IkReal x129=(cj0*r00);
IkReal x130=(pz*sj1);
IkReal x131=(cj1*py);
IkReal x132=(r02*sj0);
IkReal x133=(cj0*r02);
IkReal x134=(py*sj1);
IkReal x135=(px*sj0);
IkReal x136=(cj1*px);
IkReal x137=((0.1)*cj3);
IkReal x138=((1.1e-7)*x125);
IkReal x139=((0.106)*x126);
IkReal x140=((0.106)*x125);
IkReal x141=((1.1e-7)*x126);
IkReal x142=((1.0)*cj1*pz);
IkReal x143=((1.0)*px*sj1);
IkReal x144=(x126*x137);
IkReal x145=(x125*x127);
IkReal x146=(x126*x127);
IkReal x147=(x125*x137);
IkReal x148=(x144+x139+x138);
IkReal x149=(x140+x146+x147);
evalcond[0]=((-1.1e-7)+(((-1.0)*x141))+((cj0*x131))+x149+x130+(((-1.0)*cj1*x135)));
evalcond[1]=((-0.106)+(((-1.0)*x148))+(((-1.0)*cj0*x134))+x145+((cj1*pz))+((sj1*x135)));
evalcond[2]=((((-1.0)*x145))+(((-1.0)*x128*x142))+(((0.106)*x128))+(((0.106)*x129))+(((-1.0)*x129*x142))+((r00*x134))+(((-1.0)*r01*x143))+x148+((x131*x132))+((x133*x136)));
evalcond[3]=((((-1.0)*x141))+((x129*x130))+(((-1.0)*x133*x143))+(((-1.1e-7)*x129))+(((-1.1e-7)*x128))+((r00*x131))+x149+(((-1.0)*x132*x134))+(((-1.0)*r01*x136))+((x128*x130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x150=((1100000000.0)*px);
IkReal x151=(r02*sj0);
IkReal x152=((112360000000121.0)*r02);
IkReal x153=((1.06e+15)*r00);
IkReal x154=(pz*sj0);
IkReal x155=((112360000000121.0)*sj1);
IkReal x156=(cj0*r01);
IkReal x157=((1.06e+15)*py);
IkReal x158=(cj0*r02);
IkReal x159=(r00*sj0);
IkReal x160=((112360000000121.0)*cj1);
IkReal x161=(pz*r02);
IkReal x162=((1100000000.0)*py);
CheckValue<IkReal> x163=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x163.valid){
continue;
}
CheckValue<IkReal> x164 = IKatan2WithCheck(IkReal(((((1100000000.0)*r00*x154))+(((1.06e+15)*x161))+((r01*x157))+(((-1.0)*x150*x151))+((x155*x156))+(((-1100000000.0)*pz*x156))+((px*x153))+(((110000000.0)*cj5))+(((-1.0)*cj1*x152))+(((-1.0)*x155*x159))+((x158*x162)))),IkReal((((r01*x162))+(((-1.0)*x157*x158))+(((1100000000.0)*x161))+(((-1.0)*x153*x154))+((r00*x150))+(((-106000000000000.0)*cj5))+(((1.06e+15)*px*x151))+(((1.06e+15)*pz*x156))+(((-1.0)*sj1*x152))+((x159*x160))+(((-1.0)*x156*x160)))),IKFAST_ATAN2_MAGTHRESH);
if(!x164.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x163.value)))+(x164.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x165=IKcos(j3);
IkReal x166=IKsin(j3);
IkReal x167=px*px;
IkReal x168=py*py;
IkReal x169=pz*pz;
IkReal x170=(py*r00);
IkReal x171=((2.0)*px);
IkReal x172=((1.1e-7)*cj1);
IkReal x173=(cj0*r01);
IkReal x174=((0.212)*sj1);
IkReal x175=(r00*sj0);
IkReal x176=((0.212)*cj1);
IkReal x177=((1.1e-7)*sj1);
IkReal x178=(cj0*r00);
IkReal x179=((2.2e-7)*cj1);
IkReal x180=(px*r01);
IkReal x181=(py*r02);
IkReal x182=(cj0*py);
IkReal x183=((0.106)*cj1);
IkReal x184=(cj0*r02);
IkReal x185=(px*sj0);
IkReal x186=((2.2e-7)*sj1);
IkReal x187=(r01*sj0);
IkReal x188=((0.106)*sj1);
IkReal x189=((1.0)*r02);
IkReal x190=((2.2e-8)*x166);
IkReal x191=(cj5*x166);
IkReal x192=((1.0)*x168);
IkReal x193=(cj5*x165);
IkReal x194=((0.0212)*x165);
IkReal x195=((1.0)*x169);
IkReal x196=((1.0)*x167);
evalcond[0]=((((-1.0)*px*r00))+(((-1.0)*pz*x189))+(((1.1e-7)*x193))+((x172*x173))+(((0.106)*x191))+((x175*x188))+(((-1.0)*py*r01))+((r02*x183))+(((-1.0)*x173*x188))+(((-1.0)*x172*x175))+((r02*x177)));
evalcond[1]=((0.01)+((pz*x176))+((pz*x186))+((x179*x182))+(((-1.0)*x195))+(((-1.0)*x196))+(((-1.0)*x190))+(((-1.0)*x192))+((x174*x185))+x194+(((-1.0)*x179*x185))+(((-1.0)*x174*x182)));
evalcond[2]=(((pz*x175))+(((-1.0)*x175*x177))+((cj0*x181))+((x173*x183))+(((-1.0)*pz*x173))+(((-1.0)*r02*x172))+((x173*x177))+(((0.106)*x193))+(((0.1)*cj5))+(((-1.1e-7)*x191))+(((-1.0)*x185*x189))+(((-1.0)*x175*x183))+((r02*x188)));
evalcond[3]=((((-1.0)*x178*x195))+(((-1.0)*x178*x192))+((py*x171*x173))+((pz*x176*x187))+(((-1.0)*sj0*x176*x181))+(((2.0)*pz*sj0*x181))+(((-0.0112360000000121)*x187))+((x168*x187))+(((-1.0)*sj0*x181*x186))+((pz*x178*x186))+(((-0.0112360000000121)*x178))+(((-0.0212360000000121)*sj5))+((x174*x180))+(((-1.0)*px*x176*x184))+(((-1.0)*x187*x195))+(((-1.0)*x187*x196))+((x167*x178))+(((-1.0)*x170*x174))+(((-1.0)*px*x184*x186))+(((-1.0)*sj5*x194))+((x170*x179))+((sj0*x170*x171))+((pz*x176*x178))+(((-1.0)*x179*x180))+((pz*x171*x184))+((pz*x186*x187))+((sj5*x190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj5;
j2eval[1]=IKsign(cj5);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x197=(cj3*cj5);
IkReal x198=(cj5*sj3);
j2eval[0]=((((-1.0)*x197))+(((-963636.363636364)*x198)));
j2eval[1]=IKsign(((((-1.1e-7)*x197))+(((-0.106)*x198))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x199=(cj5*sj3);
IkReal x200=(cj3*cj5);
j2eval[0]=((((963636.363636364)*x200))+(((-1.0)*x199))+(((909090.909090909)*cj5)));
j2eval[1]=IKsign(((((0.1)*cj5))+(((-1.1e-7)*x199))+(((0.106)*x200))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j2eval[0]=((965272.727273277)+(((-1.0)*sj3))+(((963636.363636364)*cj3)));
j2eval[1]=IKsign(((0.0212360000000121)+(((-2.2e-8)*sj3))+(((0.0212)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x201=(px*sj0);
IkReal x202=((0.106)*cj1);
IkReal x203=(cj1*pz);
IkReal x204=((0.1)*cj3);
IkReal x205=(pz*sj1);
IkReal x206=((1.1e-7)*cj1);
IkReal x207=(cj0*py);
IkReal x208=((0.1)*sj1*sj3);
IkReal x209=(sj1*x207);
IkReal x210=((0.1)*cj1*sj3);
CheckValue<IkReal> x211 = IKatan2WithCheck(IkReal(((((-1.0)*x204*x205))+((cj1*x201*x204))+(((-1.0)*x201*x208))+((x201*x202))+(((-1.0)*x202*x207))+(((1.1e-8)*cj3))+(((-1.1e-7)*x209))+(((-0.106)*x205))+(((0.0106)*sj3))+(((1.1e-7)*x203))+(((-0.1)*sj3*x203))+((x207*x208))+(((1.1e-7)*sj1*x201))+(((-1.0)*cj1*x204*x207)))),IkReal(((-0.0112360000000121)+(((-1.0)*x204*x209))+(((-1.0)*x201*x206))+(((-1.0)*x207*x210))+(((0.106)*sj1*x201))+((sj1*x201*x204))+(((-0.106)*x209))+((pz*x202))+(((1.1e-8)*sj3))+((x203*x204))+(((1.1e-7)*x205))+(((-0.1)*sj3*x205))+((x206*x207))+(((-0.0106)*cj3))+((x201*x210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x211.valid){
continue;
}
CheckValue<IkReal> x212=IKPowWithIntegerCheck(IKsign(((0.0212360000000121)+(((-2.2e-8)*sj3))+(((0.0212)*cj3)))),-1);
if(!x212.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x211.value)+(((1.5707963267949)*(x212.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x213=IKsin(j2);
IkReal x214=IKcos(j2);
IkReal x215=((0.1)*sj3);
IkReal x216=(r01*sj0);
IkReal x217=(cj0*r00);
IkReal x218=(pz*sj1);
IkReal x219=(cj1*py);
IkReal x220=(r02*sj0);
IkReal x221=(cj0*r02);
IkReal x222=(py*sj1);
IkReal x223=(px*sj0);
IkReal x224=(cj1*px);
IkReal x225=((0.1)*cj3);
IkReal x226=((1.1e-7)*x213);
IkReal x227=((0.106)*x214);
IkReal x228=((1.1e-7)*x214);
IkReal x229=((0.106)*x213);
IkReal x230=((1.0)*cj1*pz);
IkReal x231=((1.0)*px*sj1);
IkReal x232=(x213*x215);
IkReal x233=(x214*x225);
IkReal x234=(x214*x215);
IkReal x235=(x213*x225);
IkReal x236=(x227+x226+x233);
IkReal x237=(x229+x234+x235);
evalcond[0]=((-1.1e-7)+(((-1.0)*cj1*x223))+((cj0*x219))+x218+x237+(((-1.0)*x228)));
evalcond[1]=((-0.106)+((cj1*pz))+((sj1*x223))+(((-1.0)*x236))+x232+(((-1.0)*cj0*x222)));
evalcond[2]=(((r00*x222))+(((-1.0)*x216*x230))+(((0.106)*x216))+(((0.106)*x217))+((x219*x220))+(((-1.0)*x236))+x232+(((-1.0)*x217*x230))+((x221*x224))+(((-1.0)*r01*x231)));
evalcond[3]=((((-1.0)*x220*x222))+(((-1.1e-7)*x217))+(((-1.1e-7)*x216))+((x216*x218))+(((-1.0)*x221*x231))+(((-1.0)*x237))+x228+(((-1.0)*r01*x224))+((x217*x218))+((r00*x219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
j2eval[0]=((965272.727273277)+(((-1.0)*sj3))+(((963636.363636364)*cj3)));
j2eval[1]=IKsign(((0.0212360000000121)+(((-2.2e-8)*sj3))+(((0.0212)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x238=(px*sj0);
IkReal x239=((0.106)*cj1);
IkReal x240=(cj1*pz);
IkReal x241=((0.1)*cj3);
IkReal x242=(pz*sj1);
IkReal x243=((1.1e-7)*cj1);
IkReal x244=(cj0*py);
IkReal x245=((0.1)*sj1*sj3);
IkReal x246=(sj1*x244);
IkReal x247=((0.1)*cj1*sj3);
CheckValue<IkReal> x248 = IKatan2WithCheck(IkReal(((((1.1e-7)*sj1*x238))+(((-1.0)*cj1*x241*x244))+(((1.1e-7)*x240))+(((-0.106)*x242))+(((-1.1e-7)*x246))+((x244*x245))+(((1.1e-8)*cj3))+(((-1.0)*x241*x242))+((cj1*x238*x241))+(((-1.0)*x238*x245))+(((-0.1)*sj3*x240))+((x238*x239))+(((0.0106)*sj3))+(((-1.0)*x239*x244)))),IkReal(((-0.0112360000000121)+((x240*x241))+(((1.1e-7)*x242))+(((-0.106)*x246))+((x238*x247))+(((0.106)*sj1*x238))+((pz*x239))+(((-1.0)*x241*x246))+(((1.1e-8)*sj3))+(((-1.0)*x238*x243))+(((-0.1)*sj3*x242))+((x243*x244))+((sj1*x238*x241))+(((-1.0)*x244*x247))+(((-0.0106)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x248.valid){
continue;
}
CheckValue<IkReal> x249=IKPowWithIntegerCheck(IKsign(((0.0212360000000121)+(((-2.2e-8)*sj3))+(((0.0212)*cj3)))),-1);
if(!x249.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x248.value)+(((1.5707963267949)*(x249.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x250=IKsin(j2);
IkReal x251=IKcos(j2);
IkReal x252=((0.1)*sj3);
IkReal x253=(r01*sj0);
IkReal x254=(cj0*r00);
IkReal x255=(pz*sj1);
IkReal x256=(cj1*py);
IkReal x257=(r02*sj0);
IkReal x258=(cj0*r02);
IkReal x259=(py*sj1);
IkReal x260=(px*sj0);
IkReal x261=(cj1*px);
IkReal x262=((0.1)*cj3);
IkReal x263=((1.1e-7)*x250);
IkReal x264=((0.106)*x251);
IkReal x265=((0.106)*x250);
IkReal x266=((1.1e-7)*x251);
IkReal x267=((1.0)*cj1*pz);
IkReal x268=((1.0)*px*sj1);
IkReal x269=(x251*x262);
IkReal x270=(x250*x252);
IkReal x271=(x251*x252);
IkReal x272=(x250*x262);
IkReal x273=(x264+x263+x269);
IkReal x274=(x265+x272+x271);
evalcond[0]=((-1.1e-7)+x255+x274+((cj0*x256))+(((-1.0)*x266))+(((-1.0)*cj1*x260)));
evalcond[1]=((-0.106)+((cj1*pz))+x270+(((-1.0)*cj0*x259))+(((-1.0)*x273))+((sj1*x260)));
evalcond[2]=((((0.106)*x253))+(((0.106)*x254))+((x258*x261))+((r00*x259))+((x256*x257))+(((-1.0)*x253*x267))+x273+(((-1.0)*r01*x268))+(((-1.0)*x270))+(((-1.0)*x254*x267)));
evalcond[3]=((((-1.1e-7)*x254))+(((-1.1e-7)*x253))+(((-1.0)*x258*x268))+((r00*x256))+(((-1.0)*x257*x259))+x274+((x253*x255))+(((-1.0)*r01*x261))+((x254*x255))+(((-1.0)*x266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x275=((1.1e-7)*cj1);
IkReal x276=(cj0*r01);
IkReal x277=(cj5*sj3);
IkReal x278=(cj1*sj0);
IkReal x279=(cj3*cj5);
IkReal x280=((0.1)*r00);
IkReal x281=(r02*sj1);
IkReal x282=((0.1)*cj3);
IkReal x283=((0.1)*sj3);
IkReal x284=((1.1e-7)*x277);
IkReal x285=((1.0)*pz*sj1);
IkReal x286=((1.0)*cj0*cj1*py);
CheckValue<IkReal> x287=IKPowWithIntegerCheck(IKsign(((((0.106)*x279))+(((0.1)*cj5))+(((-1.0)*x284)))),-1);
if(!x287.valid){
continue;
}
CheckValue<IkReal> x288 = IKatan2WithCheck(IkReal((((x275*x276))+(((-1.0)*cj1*x276*x283))+(((1.1e-7)*x279))+(((-1.0)*r00*sj0*x275))+(((1.1e-7)*x281))+((sj3*x278*x280))+(((-1.0)*x281*x283))+(((-1.0)*x279*x285))+(((-1.0)*x279*x286))+((px*x278*x279)))),IkReal(((((-1.0)*x277*x285))+(((-1.0)*x277*x286))+(((0.106)*x281))+(((0.106)*cj1*x276))+(((-1.0)*cj3*x278*x280))+x284+(((-0.106)*r00*x278))+((px*x277*x278))+((x281*x282))+((cj1*x276*x282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x288.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x287.value)))+(x288.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x289=IKcos(j2);
IkReal x290=IKsin(j2);
IkReal x291=px*px;
IkReal x292=pz*pz;
IkReal x293=py*py;
IkReal x294=(py*sj1);
IkReal x295=((2.0)*r01);
IkReal x296=(px*sj0);
IkReal x297=(pz*r00);
IkReal x298=(cj0*sj1);
IkReal x299=(cj0*r01);
IkReal x300=(px*r00);
IkReal x301=((0.212)*pz);
IkReal x302=((1.0)*px);
IkReal x303=((2.332e-8)*sj3);
IkReal x304=(cj1*r01);
IkReal x305=(cj1*r02);
IkReal x306=((2.2e-7)*r02);
IkReal x307=(r01*sj0);
IkReal x308=(r00*sj0);
IkReal x309=((1.0)*cj1);
IkReal x310=((2.0)*pz);
IkReal x311=(cj0*r00);
IkReal x312=(cj1*py);
IkReal x313=((2.0)*cj0);
IkReal x314=(cj0*py);
IkReal x315=(r02*sj1);
IkReal x316=((2.332e-8)*cj1);
IkReal x317=((1.0)*r01);
IkReal x318=(pz*sj1);
IkReal x319=((1.0)*sj0);
IkReal x320=(py*r01);
IkReal x321=((0.1)*cj3);
IkReal x322=((0.212)*r02);
IkReal x323=((0.0112359999999879)*cj1);
IkReal x324=((2.0)*px);
IkReal x325=(cj1*x291);
IkReal x326=(cj5*x289);
IkReal x327=((1.0)*x291);
IkReal x328=(sj3*x290);
IkReal x329=(sj1*x293);
IkReal x330=(sj5*x290);
IkReal x331=((0.106)*x289);
IkReal x332=(cj5*x290);
IkReal x333=((1.1e-7)*x289);
IkReal x334=((1.0)*x292);
IkReal x335=((0.1)*sj3*x289);
IkReal x336=(cj3*x332);
evalcond[0]=(((cj1*x299))+(((-1.0)*cj3*x326))+(((-1.0)*x308*x309))+((cj5*x328))+x315);
evalcond[1]=((((-1.0)*sj3*x326))+x305+(((-1.0)*x336))+(((-1.0)*x298*x317))+((sj1*x308)));
evalcond[2]=((-1.1e-7)+((x290*x321))+(((-1.0)*x296*x309))+x335+x318+(((0.106)*x290))+(((-1.0)*x333))+((cj0*x312)));
evalcond[3]=((-0.106)+(((-1.0)*cj0*x294))+(((0.1)*x328))+(((-1.0)*x289*x321))+((sj1*x296))+((cj1*pz))+(((-1.1e-7)*x290))+(((-1.0)*x331)));
evalcond[4]=((((-1.0)*sj5*x331))+(((-1.1e-7)*x330))+(((0.106)*x307))+(((-1.0)*sj5*x289*x321))+(((0.1)*sj5*x328))+((cj0*px*x305))+(((-1.0)*pz*x304*x319))+(((0.106)*x311))+((r00*x294))+(((-1.0)*r01*sj1*x302))+(((-1.0)*cj0*x297*x309))+((py*sj0*x305)));
evalcond[5]=((((-1.0)*x321*x330))+(((-1.0)*sj5*x335))+(((-1.1e-7)*x307))+((sj5*x333))+(((-0.106)*x330))+(((-1.0)*x302*x304))+(((-1.0)*r02*x298*x302))+(((-1.1e-7)*x311))+((x307*x318))+((x297*x298))+((r00*x312))+(((-1.0)*r02*x294*x319)));
evalcond[6]=(((x293*x315))+(((-1.0)*sj1*x297*x324))+(((0.0112359999999879)*x315))+(((-1.0)*x300*x312*x313))+((x308*x325))+(((2.2e-7)*x320))+(((-0.0212359999999879)*cj3*x326))+(((-0.0012359999999879)*cj5*x328))+(((-1.0)*pz*x294*x295))+((x303*x326))+(((-0.0212)*x326))+(((-1.0)*x293*x308*x309))+(((0.212)*sj0*x297))+((x314*x322))+(((-2.332e-8)*sj1*x308))+(((-1.0)*x315*x334))+((cj1*x292*x299))+(((2.2e-7)*x300))+(((2.332e-8)*r01*x298))+(((-2.2e-8)*x332))+(((-1.0)*x299*x301))+(((-2.332e-8)*x336))+((x291*x315))+(((-1.0)*x308*x323))+(((-1.0)*x296*x322))+((x299*x323))+((x299*x325))+(((-1.0)*x293*x299*x309))+(((-1.0)*x305*x310*x314))+((x295*x296*x312))+(((-2.332e-8)*x305))+((pz*x306))+((x296*x305*x310))+(((-1.0)*x292*x308*x309)));
evalcond[7]=((((-1.0)*x296*x310*x315))+(((2.332e-8)*cj3*x326))+((x291*x305))+(((-1.0)*x294*x295*x296))+((sj1*x292*x308))+((x308*x329))+(((-1.0)*sj1*x308*x327))+(((2.2e-8)*x326))+(((-1.0)*x291*x298*x317))+(((2.2e-7)*pz*x299))+(((-1.0)*x292*x298*x317))+((x308*x316))+(((0.212)*x300))+(((-2.332e-8)*x315))+((r02*x301))+((x303*x332))+((x294*x300*x313))+(((-1.0)*x306*x314))+((x293*x305))+((cj0*r02*x294*x310))+(((-1.0)*cj1*x297*x324))+(((-0.0112359999999879)*sj1*x308))+(((-1.0)*x305*x334))+(((-1.0)*x299*x316))+(((0.0112359999999879)*r01*x298))+((x296*x306))+(((-0.0112359999999879)*x305))+((r01*x293*x298))+(((0.212)*x320))+(((-2.2e-7)*sj0*x297))+(((-0.0212359999999879)*x336))+(((0.0012359999999879)*sj3*x326))+(((-0.0212)*x332))+(((-1.0)*pz*x295*x312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x337=(cj5*sj3);
IkReal x338=(pz*sj1);
IkReal x339=(cj3*cj5);
IkReal x340=((1.1e-7)*sj1);
IkReal x341=(cj0*r01);
IkReal x342=(cj1*r02);
IkReal x343=(r00*sj0);
IkReal x344=((0.1)*cj3);
IkReal x345=((0.106)*sj1);
IkReal x346=((0.1)*sj3);
IkReal x347=((1.1e-7)*x339);
IkReal x348=(cj1*px*sj0);
IkReal x349=(cj0*cj1*py);
CheckValue<IkReal> x350=IKPowWithIntegerCheck(IKsign(((((-0.106)*x337))+(((-1.0)*x347)))),-1);
if(!x350.valid){
continue;
}
CheckValue<IkReal> x351 = IKatan2WithCheck(IkReal((((x337*x349))+((x337*x338))+(((-1.1e-7)*x342))+(((-1.1e-7)*x337))+(((-1.0)*x337*x348))+((sj1*x343*x346))+(((-1.0)*x340*x343))+(((-1.0)*sj1*x341*x346))+((x340*x341))+((x342*x346)))),IkReal(((((-0.106)*x342))+(((-1.0)*sj1*x343*x344))+x347+(((-1.0)*x339*x349))+((x341*x345))+((sj1*x341*x344))+(((-1.0)*x343*x345))+((x339*x348))+(((-1.0)*x342*x344))+(((-1.0)*x338*x339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x351.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x350.value)))+(x351.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x352=IKcos(j2);
IkReal x353=IKsin(j2);
IkReal x354=px*px;
IkReal x355=pz*pz;
IkReal x356=py*py;
IkReal x357=(py*sj1);
IkReal x358=((2.0)*r01);
IkReal x359=(px*sj0);
IkReal x360=(pz*r00);
IkReal x361=(cj0*sj1);
IkReal x362=(cj0*r01);
IkReal x363=(px*r00);
IkReal x364=((0.212)*pz);
IkReal x365=((1.0)*px);
IkReal x366=((2.332e-8)*sj3);
IkReal x367=(cj1*r01);
IkReal x368=(cj1*r02);
IkReal x369=((2.2e-7)*r02);
IkReal x370=(r01*sj0);
IkReal x371=(r00*sj0);
IkReal x372=((1.0)*cj1);
IkReal x373=((2.0)*pz);
IkReal x374=(cj0*r00);
IkReal x375=(cj1*py);
IkReal x376=((2.0)*cj0);
IkReal x377=(cj0*py);
IkReal x378=(r02*sj1);
IkReal x379=((2.332e-8)*cj1);
IkReal x380=((1.0)*r01);
IkReal x381=(pz*sj1);
IkReal x382=((1.0)*sj0);
IkReal x383=(py*r01);
IkReal x384=((0.1)*cj3);
IkReal x385=((0.212)*r02);
IkReal x386=((0.0112359999999879)*cj1);
IkReal x387=((2.0)*px);
IkReal x388=(cj1*x354);
IkReal x389=(cj5*x352);
IkReal x390=((1.0)*x354);
IkReal x391=(sj3*x353);
IkReal x392=(sj1*x356);
IkReal x393=(sj5*x353);
IkReal x394=((0.106)*x352);
IkReal x395=(cj5*x353);
IkReal x396=((1.1e-7)*x352);
IkReal x397=((1.0)*x355);
IkReal x398=((0.1)*sj3*x352);
IkReal x399=(cj3*x395);
evalcond[0]=(((cj5*x391))+(((-1.0)*cj3*x389))+x378+((cj1*x362))+(((-1.0)*x371*x372)));
evalcond[1]=((((-1.0)*x399))+((sj1*x371))+x368+(((-1.0)*x361*x380))+(((-1.0)*sj3*x389)));
evalcond[2]=((-1.1e-7)+(((-1.0)*x396))+x381+x398+(((-1.0)*x359*x372))+((x353*x384))+(((0.106)*x353))+((cj0*x375)));
evalcond[3]=((-0.106)+(((-1.0)*x394))+((cj1*pz))+(((-1.0)*cj0*x357))+(((0.1)*x391))+(((-1.0)*x352*x384))+((sj1*x359))+(((-1.1e-7)*x353)));
evalcond[4]=((((-1.1e-7)*x393))+(((-1.0)*r01*sj1*x365))+(((-1.0)*cj0*x360*x372))+((cj0*px*x368))+((r00*x357))+(((0.1)*sj5*x391))+(((-1.0)*sj5*x394))+((py*sj0*x368))+(((0.106)*x370))+(((0.106)*x374))+(((-1.0)*pz*x367*x382))+(((-1.0)*sj5*x352*x384)));
evalcond[5]=((((-0.106)*x393))+(((-1.0)*x384*x393))+((r00*x375))+(((-1.0)*r02*x357*x382))+((x370*x381))+(((-1.0)*sj5*x398))+((sj5*x396))+(((-1.0)*r02*x361*x365))+((x360*x361))+(((-1.0)*x365*x367))+(((-1.1e-7)*x374))+(((-1.1e-7)*x370)));
evalcond[6]=((((-1.0)*x356*x371*x372))+((x377*x385))+(((-1.0)*x355*x371*x372))+(((-2.332e-8)*x399))+(((-1.0)*x356*x362*x372))+(((-1.0)*x362*x364))+(((-1.0)*x368*x373*x377))+(((-1.0)*x378*x397))+(((2.2e-7)*x363))+(((-0.0212359999999879)*cj3*x389))+(((-2.332e-8)*x368))+((x362*x388))+((x362*x386))+(((-0.0012359999999879)*cj5*x391))+(((0.0112359999999879)*x378))+((x356*x378))+((x354*x378))+(((-1.0)*pz*x357*x358))+((x371*x388))+(((-2.332e-8)*sj1*x371))+(((2.332e-8)*r01*x361))+((cj1*x355*x362))+((x359*x368*x373))+((pz*x369))+(((0.212)*sj0*x360))+(((-1.0)*x363*x375*x376))+((x366*x389))+(((-1.0)*sj1*x360*x387))+(((-0.0212)*x389))+(((2.2e-7)*x383))+(((-1.0)*x371*x386))+((x358*x359*x375))+(((-2.2e-8)*x395))+(((-1.0)*x359*x385)));
evalcond[7]=((((-1.0)*x354*x361*x380))+(((-1.0)*x362*x379))+((x371*x392))+(((2.332e-8)*cj3*x389))+(((-2.2e-7)*sj0*x360))+(((-0.0112359999999879)*x368))+(((-1.0)*pz*x358*x375))+(((-1.0)*x368*x397))+(((-0.0212)*x395))+(((-2.332e-8)*x378))+(((-0.0112359999999879)*sj1*x371))+(((-0.0212359999999879)*x399))+(((-1.0)*cj1*x360*x387))+((x366*x395))+(((-1.0)*x357*x358*x359))+((x359*x369))+(((0.212)*x383))+((x356*x368))+(((-1.0)*x355*x361*x380))+((x354*x368))+((r01*x356*x361))+(((-1.0)*sj1*x371*x390))+(((-1.0)*x369*x377))+((x357*x363*x376))+(((0.212)*x363))+((cj0*r02*x357*x373))+(((2.2e-8)*x389))+((sj1*x355*x371))+(((0.0012359999999879)*sj3*x389))+(((0.0112359999999879)*r01*x361))+((x371*x379))+((r02*x364))+(((2.2e-7)*pz*x362))+(((-1.0)*x359*x373*x378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x400=(cj3*r02);
IkReal x401=((1.0)*sj1);
IkReal x402=(r02*sj3);
IkReal x403=(r00*sj0*sj3);
IkReal x404=(cj3*r00*sj0);
IkReal x405=(cj0*cj3*r01);
IkReal x406=((1.0)*cj0*r01*sj3);
CheckValue<IkReal> x407 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x406))+((sj1*x404))+(((-1.0)*x401*x402))+(((-1.0)*x401*x405))+((cj1*x400))+((cj1*x403)))),IkReal((((sj1*x403))+((sj1*x400))+(((-1.0)*cj1*x404))+(((-1.0)*cj0*r01*sj3*x401))+((cj1*x405))+((cj1*x402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x407.valid){
continue;
}
CheckValue<IkReal> x408=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x408.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x407.value)+(((1.5707963267949)*(x408.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x409=IKcos(j2);
IkReal x410=IKsin(j2);
IkReal x411=px*px;
IkReal x412=pz*pz;
IkReal x413=py*py;
IkReal x414=(py*sj1);
IkReal x415=((2.0)*r01);
IkReal x416=(px*sj0);
IkReal x417=(pz*r00);
IkReal x418=(cj0*sj1);
IkReal x419=(cj0*r01);
IkReal x420=(px*r00);
IkReal x421=((0.212)*pz);
IkReal x422=((1.0)*px);
IkReal x423=((2.332e-8)*sj3);
IkReal x424=(cj1*r01);
IkReal x425=(cj1*r02);
IkReal x426=((2.2e-7)*r02);
IkReal x427=(r01*sj0);
IkReal x428=(r00*sj0);
IkReal x429=((1.0)*cj1);
IkReal x430=((2.0)*pz);
IkReal x431=(cj0*r00);
IkReal x432=(cj1*py);
IkReal x433=((2.0)*cj0);
IkReal x434=(cj0*py);
IkReal x435=(r02*sj1);
IkReal x436=((2.332e-8)*cj1);
IkReal x437=((1.0)*r01);
IkReal x438=(pz*sj1);
IkReal x439=((1.0)*sj0);
IkReal x440=(py*r01);
IkReal x441=((0.1)*cj3);
IkReal x442=((0.212)*r02);
IkReal x443=((0.0112359999999879)*cj1);
IkReal x444=((2.0)*px);
IkReal x445=(cj1*x411);
IkReal x446=(cj5*x409);
IkReal x447=((1.0)*x411);
IkReal x448=(sj3*x410);
IkReal x449=(sj1*x413);
IkReal x450=(sj5*x410);
IkReal x451=((0.106)*x409);
IkReal x452=(cj5*x410);
IkReal x453=((1.1e-7)*x409);
IkReal x454=((1.0)*x412);
IkReal x455=((0.1)*sj3*x409);
IkReal x456=(cj3*x452);
evalcond[0]=((((-1.0)*cj3*x446))+((cj5*x448))+x435+(((-1.0)*x428*x429))+((cj1*x419)));
evalcond[1]=((((-1.0)*x456))+x425+(((-1.0)*sj3*x446))+((sj1*x428))+(((-1.0)*x418*x437)));
evalcond[2]=((-1.1e-7)+(((-1.0)*x416*x429))+((x410*x441))+(((-1.0)*x453))+((cj0*x432))+x438+x455+(((0.106)*x410)));
evalcond[3]=((-0.106)+(((-1.1e-7)*x410))+(((-1.0)*cj0*x414))+((sj1*x416))+((cj1*pz))+(((-1.0)*x451))+(((0.1)*x448))+(((-1.0)*x409*x441)));
evalcond[4]=((((-1.0)*pz*x424*x439))+(((-1.0)*r01*sj1*x422))+(((-1.0)*cj0*x417*x429))+(((-1.0)*sj5*x451))+(((0.106)*x431))+(((0.106)*x427))+((r00*x414))+(((-1.0)*sj5*x409*x441))+(((0.1)*sj5*x448))+(((-1.1e-7)*x450))+((cj0*px*x425))+((py*sj0*x425)));
evalcond[5]=((((-1.0)*x422*x424))+(((-1.1e-7)*x431))+(((-1.0)*sj5*x455))+(((-1.0)*r02*x418*x422))+((x417*x418))+((r00*x432))+(((-1.0)*r02*x414*x439))+(((-0.106)*x450))+(((-1.1e-7)*x427))+((sj5*x453))+((x427*x438))+(((-1.0)*x441*x450)));
evalcond[6]=((((0.0112359999999879)*x435))+(((-1.0)*x435*x454))+(((-1.0)*x412*x428*x429))+((x434*x442))+(((-1.0)*sj1*x417*x444))+(((-2.332e-8)*x425))+(((-2.332e-8)*sj1*x428))+((x416*x425*x430))+((x428*x445))+(((-1.0)*x420*x432*x433))+(((-1.0)*x416*x442))+(((-0.0212359999999879)*cj3*x446))+(((-2.332e-8)*x456))+((x413*x435))+(((-1.0)*x425*x430*x434))+(((-2.2e-8)*x452))+(((0.212)*sj0*x417))+((x411*x435))+((pz*x426))+(((-0.0212)*x446))+(((-0.0012359999999879)*cj5*x448))+((cj1*x412*x419))+((x415*x416*x432))+(((2.2e-7)*x420))+((x423*x446))+((x419*x443))+((x419*x445))+(((-1.0)*x413*x419*x429))+(((-1.0)*x419*x421))+(((-1.0)*pz*x414*x415))+(((-1.0)*x428*x443))+(((2.2e-7)*x440))+(((2.332e-8)*r01*x418))+(((-1.0)*x413*x428*x429)));
evalcond[7]=((((-0.0112359999999879)*x425))+((x423*x452))+(((-1.0)*pz*x415*x432))+(((-2.2e-7)*sj0*x417))+(((-1.0)*x412*x418*x437))+(((-1.0)*sj1*x428*x447))+(((0.0012359999999879)*sj3*x446))+((x428*x436))+(((2.2e-7)*pz*x419))+((x413*x425))+(((-1.0)*x416*x430*x435))+((x411*x425))+((x428*x449))+((r02*x421))+(((2.332e-8)*cj3*x446))+((x416*x426))+(((0.212)*x420))+(((-1.0)*x414*x415*x416))+((r01*x413*x418))+(((-1.0)*cj1*x417*x444))+(((0.212)*x440))+(((-0.0212359999999879)*x456))+(((-1.0)*x426*x434))+(((-1.0)*x411*x418*x437))+((cj0*r02*x414*x430))+((sj1*x412*x428))+((x414*x420*x433))+(((0.0112359999999879)*r01*x418))+(((-0.0112359999999879)*sj1*x428))+(((-0.0212)*x452))+(((-1.0)*x419*x436))+(((-1.0)*x425*x454))+(((2.2e-8)*x446))+(((-2.332e-8)*x435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j5;
vinfos[4].indices[0] = _ij5[0];
vinfos[4].indices[1] = _ij5[1];
vinfos[4].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "1a4f64b2753b84eeb24fa9cbc6720593"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif